LOAD(,0x0)
LOAD(,0x1)
LOAD(,0x2)
LOAD(,0x3)
LOAD(,0x4)
LOAD(,0x5)
LOAD(,0x6)
LOAD(,0x7)
LOAD(,0x8)
LOAD(,0x9)
LOAD(,0xA)
LOAD(,0xB)
LOAD(,0xC)
LOAD(,0xD)
LOAD(,0xE)
LOAD(RAM[255],0xF)
LOAD(,0x10)
LOAD(,0x11)
LOAD(,0x12)
LOAD(,0x13)
LOAD(,0x14)
LOAD(,0x15)
LOAD(,0x16)
LOAD(,0x17)
LOAD(,0x18)
LOAD(,0x19)
LOAD(,0x1A)
LOAD(,0x1B)
LOAD(,0x1C)
LOAD(,0x1D)
LOAD(,0x1E)
LOAD(RAM[254],0x1F)
LOAD(,0x20)
LOAD(,0x21)
LOAD(,0x22)
LOAD(,0x23)
LOAD(,0x24)
LOAD(,0x25)
LOAD(,0x26)
LOAD(,0x27)
LOAD(,0x28)
LOAD(,0x29)
LOAD(,0x2A)
LOAD(,0x2B)
LOAD(,0x2C)
LOAD(,0x2D)
LOAD(,0x2E)
LOAD(RAM[253],0x2F)

# For two's complement, we need to add 001
SET(Y)
CLR(Z)

# ======================== G1 ===========================
# Top corners
CPY(NEWS,RAM[253])
CPY(NEWS,NORTH) # Shift down
CPY(,EAST) 
SUM(RAM[0x0],WEST) # Add east and west together
CPY(NEWS,RAM[254])
CPY(NEWS,NORTH)
CPY(,EAST)
SUM(RAM[0x1],WEST)
CPY(NEWS,RAM[255])
CPY(NEWS,NORTH)
CPY(,EAST)
SUM(RAM[0x2],WEST)
RDCAR(RAM[0x3])

# Add Top (shifted up 1)
CPY(NEWS,RAM[253])
CPY(,RAM[0x1])
SUM(RAM[0x1],NORTH)
CPY(NEWS,RAM[254])
CPY(,RAM[0x2])
SUM(RAM[0x2],NORTH)
CPY(NEWS,RAM[255])
CPY(,RAM[0x3])
SUM(RAM[0x3],NORTH)
RDCAR(RAM[0x4])

# Bottom corners
CPY(NEWS,RAM[253])
CPY(NEWS,SOUTH) # Shift down
CPY(,EAST) 
SUM(RAM[0x5],WEST) # Add east and west together
CPY(NEWS,RAM[254])
CPY(NEWS,SOUTH)
CPY(,EAST)
SUM(RAM[0x6],WEST)
CPY(NEWS,RAM[255])
CPY(NEWS,SOUTH)
CPY(,EAST)
SUM(RAM[0x7],WEST)
RDCAR(RAM[0x8])

# Add Bottom (shifted up 1)
CPY(NEWS,RAM[253])
CPY(,RAM[0x6])
SUM(RAM[0x6],SOUTH)
CPY(NEWS,RAM[254])
CPY(,RAM[0x7])
SUM(RAM[0x7],SOUTH)
CPY(NEWS,RAM[255])
CPY(,RAM[0x8])
SUM(RAM[0x8],SOUTH)
RDCAR(RAM[0x9])

# Calculate top - bottom
SET() # Set accumulator
SUM(,Y) # Add 1 to generate carry which we'll use for 2's complement
CPY.INV(,RAM[0x5])
SUM(RAM[0x0],RAM[0x0])
CPY.INV(,RAM[0x6])
SUM(RAM[0x1],RAM[0x1])
CPY.INV(,RAM[0x7])
SUM(RAM[0x2],RAM[0x2])
CPY.INV(,RAM[0x8])
SUM(RAM[0x3],RAM[0x3])
CPY.INV(,RAM[0x9])
SUM(RAM[0x4],RAM[0x4])

# IF (Negative)
RDCAR.INV(FLAG) # Positive sums generate a carry.

# Absolute value - Negate if we're negative
CPY.INV(,Y)
SUM(RAM[0x0],RAM[0x0])
CPY.INV(,Z)
SUM(RAM[0x1],RAM[0x1])
CPY.INV(,Z)
SUM(RAM[0x2],RAM[0x2])
CPY.INV(,Z)
SUM(RAM[0x3],RAM[0x3])
CPY.INV(,Z)
SUM(RAM[0x4],RAM[0x4])
RDCAR() # Discard carry

SET(FLAG) 
# END IF (Negative)

# ======================== G2 ===========================
# West corners
CPY(NEWS,RAM[253])
CPY(NEWS,WEST) 
CPY(,NORTH) 
SUM(RAM[0x10],SOUTH) 
CPY(NEWS,RAM[254])
CPY(NEWS,WEST)
CPY(,NORTH)
SUM(RAM[0x11],SOUTH)
CPY(NEWS,RAM[255])
CPY(NEWS,WEST)
CPY(,NORTH)
SUM(RAM[0x12],SOUTH)
RDCAR(RAM[0x13])

# Add West (shifted up 1)
CPY(NEWS,RAM[253])
CPY(,RAM[0x11])
SUM(RAM[0x11],WEST)
CPY(NEWS,RAM[254])
CPY(,RAM[0x12])
SUM(RAM[0x12],WEST)
CPY(NEWS,RAM[255])
CPY(,RAM[0x13])
SUM(RAM[0x13],WEST)
RDCAR(RAM[0x14])

# East corners
CPY(NEWS,RAM[253])
CPY(NEWS,EAST)
CPY(,NORTH) 
SUM(RAM[0x15],SOUTH)
CPY(NEWS,RAM[254])
CPY(NEWS,EAST)
CPY(,NORTH)
SUM(RAM[0x16],SOUTH)
CPY(NEWS,RAM[255])
CPY(NEWS,EAST)
CPY(,NORTH)
SUM(RAM[0x17],SOUTH)
RDCAR(RAM[0x18])

# Add Bottom (shifted up 1)
CPY(NEWS,RAM[253])
CPY(,RAM[0x16])
SUM(RAM[0x16],EAST)
CPY(NEWS,RAM[254])
CPY(,RAM[0x17])
SUM(RAM[0x17],EAST)
CPY(NEWS,RAM[255])
CPY(,RAM[0x18])
SUM(RAM[0x18],EAST)
RDCAR(RAM[0x19])

# Calculate east - west
SET() # Set accumulator
SUM(,Y) # Add 1 to generate carry which we'll use for 2's complement
CPY.INV(,RAM[0x15])
SUM(RAM[0x10],RAM[0x10])
CPY.INV(,RAM[0x16])
SUM(RAM[0x11],RAM[0x11])
CPY.INV(,RAM[0x17])
SUM(RAM[0x12],RAM[0x12])
CPY.INV(,RAM[0x18])
SUM(RAM[0x13],RAM[0x13])
CPY.INV(,RAM[0x19])
SUM(RAM[0x14],RAM[0x14])

# IF (Negative)
RDCAR.INV(FLAG) # Positive sums generate a carry.

# Absolute value - Negate if we're negative
CPY.INV(,Y)
SUM(RAM[0x10],RAM[0x10])
CPY.INV(,Z)
SUM(RAM[0x11],RAM[0x11])
CPY.INV(,Z)
SUM(RAM[0x12],RAM[0x12])
CPY.INV(,Z)
SUM(RAM[0x13],RAM[0x13])
CPY.INV(,Z)
SUM(RAM[0x14],RAM[0x14])
RDCAR() # Discard carry

SET(FLAG) 
# END IF (Negative)

# Sum the two results together (apparently an approximation)
CPY(,RAM[0x10])
SUM(RAM[0x0],RAM[0x0])
CPY(,RAM[0x11])
SUM(RAM[0x1],RAM[0x1])
CPY(,RAM[0x12])
SUM(RAM[0x2],RAM[0x2])
CPY(,RAM[0x13])
SUM(RAM[0x3],RAM[0x3])
CPY(,RAM[0x14])
SUM(RAM[0x4],RAM[0x4])
RDCAR(FLAG) # If we oversaturated, make it white
SET(RAM[0x10])
SET(RAM[0x11])
SET(RAM[0x12])
SET(RAM[0x13])
SET(RAM[0x14])
SET(FLAG)

CPY(NEWS,RAM[0x14])
SAVE(,0x0)
SAVE(,0x1)
SAVE(,0x2)
SAVE(,0x3)
SAVE(,0x4)
SAVE(,0x5)
SAVE(,0x6)
SAVE(,0x7)
SAVE(,0x8)
SAVE(,0x9)
SAVE(,0xA)
SAVE(,0xB)
SAVE(,0xC)
SAVE(,0xD)
SAVE(,0xE)
SAVE(,0xF)

CPY(NEWS,RAM[0x13])
SAVE(,0x10)
SAVE(,0x11)
SAVE(,0x12)
SAVE(,0x13)
SAVE(,0x14)
SAVE(,0x15)
SAVE(,0x16)
SAVE(,0x17)
SAVE(,0x18)
SAVE(,0x19)
SAVE(,0x1A)
SAVE(,0x1B)
SAVE(,0x1C)
SAVE(,0x1D)
SAVE(,0x1E)
SAVE(,0x1F)

CPY(NEWS,RAM[0x12])
SAVE(,0x20)
SAVE(,0x21)
SAVE(,0x22)
SAVE(,0x23)
SAVE(,0x24)
SAVE(,0x25)
SAVE(,0x26)
SAVE(,0x27)
SAVE(,0x28)
SAVE(,0x29)
SAVE(,0x2A)
SAVE(,0x2B)
SAVE(,0x2C)
SAVE(,0x2D)
SAVE(,0x2E)
SAVE(,0x2F)

# Discard remaining bits
