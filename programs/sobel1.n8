LOAD(,0x0)
LOAD(,0x1)
LOAD(,0x2)
LOAD(,0x3)
LOAD(,0x4)
LOAD(,0x5)
LOAD(,0x6)
LOAD(,0x7)
LOAD(,0x8)
LOAD(,0x9)
LOAD(,0xA)
LOAD(,0xB)
LOAD(,0xC)
LOAD(,0xD)
LOAD(,0xE)
LOAD(RAM[255],0xF)

# For two's complement, we need to add 001
SET(Y)
CLR(Z)

# ======================== G1 ===========================
# Top corners
CPY(NEWS,RAM[255])
CPY(NEWS,NORTH) # Shift down
CPY(,EAST) 
SUM(RAM[0x0],WEST) # Add east and west together
CLR() 
SUM(RAM[0x1],Z) # Effectively reads carry

# Add Top (shifted up 1)
CPY(NEWS,RAM[255])
CPY(,NORTH)
SUM(RAM[0x1],RAM[0x1])
CLR() 
SUM(RAM[0x2],Z) # Effectively reads carry

# Bottom corners
CPY(NEWS,RAM[255])
CPY(NEWS,SOUTH) # Shift down
CPY(,EAST) 
SUM(RAM[0x5],WEST) # Add east and west together
CLR() 
SUM(RAM[0x6],Z) # Effectively reads carry

# Add Bottom (shifted up 1)
CPY(NEWS,RAM[255])
CPY(,SOUTH)
SUM(RAM[0x6],RAM[0x6])
CLR() 
SUM(RAM[0x7],Z) # Effectively reads carry

# Calculate top - bottom
SET() # Set accumulator
SUM(,Y) # Add 1 to generate carry which we'll use for 2's complement
CPY.INV(,RAM[0x5])
SUM(RAM[0x0],RAM[0x0])
CPY.INV(,RAM[0x6])
SUM(RAM[0x1],RAM[0x1])
CPY.INV(,RAM[0x7])
SUM(RAM[0x2],RAM[0x2])

# IF (Negative)
CLR() 
SUM.INV(FLAG,Z) # Positive sums generate a carry.

# Absolute value - Negate if we're negative
CPY.INV(,RAM[0x0])
SUM(RAM[0x0],Y)
CPY.INV(,RAM[0x1])
SUM(RAM[0x1],Z)
CPY.INV(,RAM[0x1])
SUM(RAM[0x2],Z)
CLR() 
SUM(,Z) # Discard carry

SET(FLAG) 
# END IF (Negative)

# ======================== G2 ===========================
# West corners
CPY(NEWS,RAM[255])
CPY(NEWS,WEST) 
CPY(,NORTH) 
SUM(RAM[0x10],SOUTH) 
CLR() 
SUM(RAM[0x11],Z)

# Add West (shifted up 1)
CPY(NEWS,RAM[255])
CPY(,WEST)
SUM(RAM[0x11],RAM[0x11])
CLR() 
SUM(RAM[0x12],Z)

# East corners
CPY(NEWS,RAM[255])
CPY(NEWS,EAST)
CPY(,NORTH) 
SUM(RAM[0x15],SOUTH)
CLR() 
SUM(RAM[0x16],Z)

# Add Bottom (shifted up 1)
CPY(NEWS,RAM[255])
CPY(,EAST)
SUM(RAM[0x16],RAM[0x16])
CLR() 
SUM(RAM[0x17],Z)

# Calculate east - west
SET() # Set accumulator
SUM(,Y) # Add 1 to generate carry which we'll use for 2's complement
CPY.INV(,RAM[0x15])
SUM(RAM[0x10],RAM[0x10])
CPY.INV(,RAM[0x16])
SUM(RAM[0x11],RAM[0x11])
CPY.INV(,RAM[0x17])
SUM(RAM[0x12],RAM[0x12])

# IF (Negative)
CLR() 
SUM.INV(FLAG,Z) # Positive sums generate a carry.

# Absolute value - Negate if we're negative
CPY.INV(,RAM[0x10])
SUM(RAM[0x10],Y)
CPY.INV(,RAM[0x11])
SUM(RAM[0x11],Z)
CPY.INV(,RAM[0x12])
SUM(RAM[0x12],Z)
CLR() 
SUM(,Z) # Discard carry

SET(FLAG) 
# END IF (Negative)

# Sum the two results together (apparently an approximation)
CPY(,RAM[0x10])
SUM(RAM[0x0],RAM[0x0])
CPY(,RAM[0x11])
SUM(RAM[0x1],RAM[0x1])
CPY(,RAM[0x12])
SUM(RAM[0x2],RAM[0x2])
CLR() 
SUM(,Z)
OR(,RAM[0x2])
OR(FLAG,RAM[0x1]) # If we oversaturated, make it white
SET(RAM[0x0])
SET(FLAG)

CPY(NEWS,RAM[0x0])
SAVE(,0x0)
SAVE(,0x1)
SAVE(,0x2)
SAVE(,0x3)
SAVE(,0x4)
SAVE(,0x5)
SAVE(,0x6)
SAVE(,0x7)
SAVE(,0x8)
SAVE(,0x9)
SAVE(,0xA)
SAVE(,0xB)
SAVE(,0xC)
SAVE(,0xD)
SAVE(,0xE)
SAVE(,0xF)

# Discard remaining bits
